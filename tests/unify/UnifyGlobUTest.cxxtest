/**
 * UnifyGlobUTest.cxxtest
 *
 * Copyright (C) 2019 OpenCog Foundation
 * All Rights Reserved
 * Author: Kasim
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Logger.h>

#include <opencog/atoms/core/Context.h>
#include <opencog/unify/Unify.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

class UnifyGlobUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;
	Handle X, Y, P, Q, R, S, A, B, C, D, PQ, XP, RQSY, QRP, XY, UPQ, XYV, lX, y, QRy, X2, Y2, XX2P,
			QlXP, QlQRP, ABCXR, YCPQR, XYDABC, QRPyX2Y2, ABR;
	Handle U, V, W, T, O, C1, C2, UNXY, UNQRP, UNC1C2, UNC1C2S, UNXYP, UNXYPQ, UNSC1U, UNXYUVW, UNSTOC1C2,
			UNUVAND, UNSORAND, UNQRPS, UNQSC1U;

	Context::VariablesStack X_varstack;

public:
	UnifyGlobUTest() : _eval(&_as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);
		logger().set_timestamp_flag(false);

		X = an(GLOB_NODE, "$X");
		X2 = an(GLOB_NODE, "$X2");
		Y = an(GLOB_NODE, "$Y");
		Y2 = an(GLOB_NODE, "$Y2");
		y = an(VARIABLE_NODE, "$y");
		U = an(GLOB_NODE, "$U");
		V = an(GLOB_NODE, "$V");
		W = an(GLOB_NODE, "$W");

		P = an(PREDICATE_NODE, "P");
		Q = an(PREDICATE_NODE, "Q");
		R = an(PREDICATE_NODE, "R");
		S = an(PREDICATE_NODE, "S");
		T = an(PREDICATE_NODE, "T");
		O = an(PREDICATE_NODE, "O");

		A = an(CONCEPT_NODE, "A");
		B = an(CONCEPT_NODE, "B");
		C = an(CONCEPT_NODE, "C");
		D = an(CONCEPT_NODE, "D");
		C1 = an(CONCEPT_NODE, "C1");
		C2 = an(CONCEPT_NODE, "C2");

		PQ = al(LIST_LINK, {P, Q});
		XP = al(LIST_LINK, {X, P});
		UPQ = al(LIST_LINK, {U, P, Q});
		RQSY = al(LIST_LINK, {R, Q, S, Y});
		XY = al(LIST_LINK, {X, Y});
		XYV = al(LIST_LINK, {X, Y, V});
		QRP = al(LIST_LINK, {Q, R, P});
		QRy = al(LIST_LINK, {Q, R, y});
		XX2P = al(LIST_LINK, {X, X2, P});
		QlXP = al(LIST_LINK, {Q, XP});
		QlQRP = al(LIST_LINK, {Q, QRP});
		ABR = al(LIST_LINK, {A, B, R});
		ABCXR = al(LIST_LINK, {A, B, C, X, R});
		YCPQR = al(LIST_LINK, {Y, C, P, Q, R});
		XYDABC = al(LIST_LINK, {X, Y, D, A, B, C});
		QRPyX2Y2 = al(LIST_LINK, {Q, R, P, y, X2, Y2});

		HandleSeq seq = {X};
		lX = al(LIST_LINK, seq);

		UNXY = al(AND_LINK, {X, Y});
		UNQRP = al(AND_LINK, {Q, R, P});
		UNQRPS = al(AND_LINK, {Q, R, P, S});
		UNC1C2 = al(AND_LINK, {C1, C2});
		UNC1C2S = al(AND_LINK, {C1, C2, S});
		UNXYP = al(AND_LINK, {X, Y, P});
		UNXYPQ = al(AND_LINK, {X, Y, P, Q});
		UNSC1U = al(AND_LINK, {S, C1, U});
		UNQSC1U = al(AND_LINK, {Q, S, C1, U});
		UNXYUVW = al(AND_LINK, {X, Y, U, V, W});
		UNSTOC1C2 = al(AND_LINK, {S, T, O, C1, C2});

		UNUVAND = al(AND_LINK, {U, V, UNXY});
		UNSORAND = al(AND_LINK, {S, O, R, UNC1C2});
	}

	void setUp();

	// TODO: THIS UNIT TESTS ARE VALID UNTIL JOINING SOLUTIONS THAT CONTAIN
	//  GLOB_NODE IS SUPPORTED. UPDATE AS SOON AS JOIN IS IMPLEMENTED.
	void test_simple_glob();
	void test_simple_glob1();
	void test_simple_glob1_alt1();
	void test_simple_glob1_alt2();
	void test_simple_glob2();
	void test_simple_glob2_alt1();
	void test_simple_glob3();
	void test_simple_glob3_alt1();
	void test_simple_glob4();
	void test_simple_glob4_alt1();
	void test_simple_glob4_alt2();
	void test_simple_glob5();
	void test_simple_glob5_alt();
	void test_simple_glob6();
	void test_simple_glob7();
	void test_simple_glob8();
	void test_simple_glob9();
	void test_simple_glob10();

	void test_typed_glob1();
	void test_typed_glob2();
	void test_typed_glob3();
	void test_typed_glob3_alt();
	void test_typed_glob4();
	void test_typed_glob4_alt1();

	void test_join();
	void test_join2();

	void test_simple_unordered_glob3();
	void test_simple_unordered_glob3_alt();
	void test_simple_unordered_glob4();
	void test_simple_unordered_glob5();
	void test_simple_unordered_glob6();
	void test_simple_unordered_glob7();
	void test_simple_unordered_glob8();

	void test_typed_unordered_glob1();
};

void UnifyGlobUTest::setUp(void)
{
}

void UnifyGlobUTest::test_simple_glob()
{
	Handle left_vardecl = _eval.eval_h("(TypedVariable"
	                                   "(GlobNode \"$G\")"
	                                   "(TypeNode \"PredicateNode\"))");

	Unify unify(X, P, left_vardecl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected(false);
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob1()
{
	Handle left_vardecl = _eval.eval_h("(TypedVariable"
	                                   "(GlobNode \"$G\")"
	                                   "(TypeNode \"PredicateNode\"))");

	Unify unify(X, Y, left_vardecl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{Y, al(LIST_LINK, {X})}, al(LIST_LINK, {X})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob1_alt1()
{
	Unify unify(X, PQ);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {PQ})}, al(LIST_LINK, {PQ})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob1_alt2()
{
	Unify unify(XY, PQ);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) << std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {P})}, al(LIST_LINK, {P})},
			                             {{Y, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})}}});
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob2()
{
	Unify unify(XYV, al(LIST_LINK, U));
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{U, al(LIST_LINK, {X, Y, V})}, al(LIST_LINK, {X, Y, V})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob2_alt1()
{
	Unify unify(al(LIST_LINK, U), XYV);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{U, al(LIST_LINK, {X, Y, V})}, al(LIST_LINK, {X, Y, V})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob3()
{
	Unify unify(QRP, XY);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
			                             {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}},
	                             {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
			                             {{Y, al(LIST_LINK, {R, P})}, al(LIST_LINK, {R, P})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob3_alt1()
{
	Unify unify(XY, QRP);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
			                             {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}},
	                             {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
			                             {{Y, al(LIST_LINK, {R, P})}, al(LIST_LINK, {R, P})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob4()
{
	Unify unify(al(LIST_LINK, A, B, X, Y, P), al(LIST_LINK, X2, U, P));
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X2, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
			                    {{U, al(LIST_LINK, {X, Y})}, al(LIST_LINK, {X, Y})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob4_alt1()
{
	Unify unify(XP, QRP);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob4_alt2()
{
	Unify unify(lX, PQ);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {P, Q})}, al(LIST_LINK, {P, Q})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob5()
{
	Unify unify(XX2P, QRP);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{X2, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob5_alt()
{
	Unify unify(XX2P, RQSY);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {R, Q})}, al(LIST_LINK, {R, Q})},
							   {{X2, al(LIST_LINK, {S})}, al(LIST_LINK, {S})},
							   {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}},
	                             {{{X2, al(LIST_LINK, {Q, S})}, al(LIST_LINK, {Q, S})},
							   {{X, al(LIST_LINK, {R})}, al(LIST_LINK, {R})},
							   {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob6()
{
	Unify unify(XP, QRy);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})}, {{y, P}, P}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob7()
{
	Unify unify(QlXP, QlQRP);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob8()
{
	Unify unify(QRP, XP);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob9()
{
	Unify unify(XY, ABR);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
							   {{Y, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_glob10()
{
	Unify unify(ABR, XY);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
			                             {{Y, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_typed_glob1()
{
	Handle left_vardecl = _eval.eval_h("(TypedVariable"
	                                   "(GlobNode \"$X\")"
	                                   "(TypeNode \"PredicateNode\"))");
	Handle right_vardecl = _eval.eval_h("(TypedVariable"
	                                   "(GlobNode \"$Y\")"
	                                   "(TypeNode \"ConceptNode\"))");

	Unify unify(ABCXR, YCPQR, left_vardecl, right_vardecl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{Y, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
							   {{X, al(LIST_LINK, {P, Q})}, al(LIST_LINK, {P, Q})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_typed_glob2()
{
	Unify unify(XYDABC, QRPyX2Y2);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R, P})}, al(LIST_LINK, {Q, R, P})},{{y, Y}, Y},
							   {{X2, al(LIST_LINK, {D, A, B})}, al(LIST_LINK, {D, A, B})},
							   {{Y2, al(LIST_LINK, {C})}, al(LIST_LINK, {C})}},
							   {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{Y, al(LIST_LINK, {R, P})}, al(LIST_LINK, {R, P})},{{y, D}, D},
							   {{X2, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
							   {{Y2, al(LIST_LINK, {C})}, al(LIST_LINK, {C})}},
							   {{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
							   {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}, {{y, D}, D},
							   {{X2, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
							   {{Y2, al(LIST_LINK, {C})}, al(LIST_LINK, {C})}},
							   {{{X, al(LIST_LINK, {Q, R, P})}, al(LIST_LINK, {Q, R, P})}, {{y, Y}, Y},
							   {{X2, al(LIST_LINK, {D, A})}, al(LIST_LINK, {D, A})},
							   {{Y2, al(LIST_LINK, {B, C})}, al(LIST_LINK, {B, C})}},
							   {{{X, al(LIST_LINK, {Q, R, P})}, al(LIST_LINK, {Q, R, P})}, {{y, Y}, Y},
							   {{Y2, al(LIST_LINK, {A, B, C})}, al(LIST_LINK, {A, B, C})},
							   {{X2, al(LIST_LINK, {D})}, al(LIST_LINK, {D})}},
							   {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{Y, al(LIST_LINK, {R, P})}, al(LIST_LINK, {R, P})}, {{y, D}, D},
							   {{X2, al(LIST_LINK, {A})}, al(LIST_LINK, {A})},
							   {{Y2, al(LIST_LINK, {B, C})}, al(LIST_LINK, {B, C})}},
							   {{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
							   {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}, {{y, D}, D},
							   {{X2, al(LIST_LINK, {A})}, al(LIST_LINK, {A})},
							   {{Y2, al(LIST_LINK, {B, C})}, al(LIST_LINK, {B, C})}}});

	Unify::SolutionSet expected2({{{{X, al(LIST_LINK, {Q, R, P})}, al(LIST_LINK, {Q, R, P})},
							   {{Y, al(LIST_LINK, {y})}, al(LIST_LINK, {y})},
							   {{X2, al(LIST_LINK, {D, A, B})}, al(LIST_LINK, {D, A, B})},
							   {{Y2, al(LIST_LINK, {C})}, al(LIST_LINK, {C})}},
							   {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{Y, al(LIST_LINK, {R, P})}, al(LIST_LINK, {R, P})},{{y, D}, D},
							   {{X2, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
							   {{Y2, al(LIST_LINK, {C})}, al(LIST_LINK, {C})}},
							   {{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
							   {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}, {{y, D}, D},
							   {{X2, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
							   {{Y2, al(LIST_LINK, {C})}, al(LIST_LINK, {C})}},
							   {{{X, al(LIST_LINK, {Q, R, P})}, al(LIST_LINK, {Q, R, P})},
							   {{Y, al(LIST_LINK, {y})}, al(LIST_LINK, {y})},
							   {{X2, al(LIST_LINK, {D, A})}, al(LIST_LINK, {D, A})},
							   {{Y2, al(LIST_LINK, {B, C})}, al(LIST_LINK, {B, C})}},
							   {{{X, al(LIST_LINK, {Q, R, P})}, al(LIST_LINK, {Q, R, P})},
							   {{Y, al(LIST_LINK, {y})}, al(LIST_LINK, {y})},
							   {{Y2, al(LIST_LINK, {A, B, C})}, al(LIST_LINK, {A, B, C})},
							   {{X2, al(LIST_LINK, {D})}, al(LIST_LINK, {D})}},
							   {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{Y, al(LIST_LINK, {R, P})}, al(LIST_LINK, {R, P})}, {{y, D}, D},
							   {{X2, al(LIST_LINK, {A})}, al(LIST_LINK, {A})},
							   {{Y2, al(LIST_LINK, {B, C})}, al(LIST_LINK, {B, C})}},
							   {{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
							   {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}, {{y, D}, D},
							   {{X2, al(LIST_LINK, {A})}, al(LIST_LINK, {A})},
							   {{Y2, al(LIST_LINK, {B, C})}, al(LIST_LINK, {B, C})}}});
	std::cout << "\n expected\n" << oc_to_string(expected) << std::endl;

	TS_ASSERT((result==expected2) or (result==expected));
}

void UnifyGlobUTest::test_typed_glob3()
{
	Handle left_vardecl = Handle();
	Handle right_vardecl = _eval.eval_h("(VariableList"
									 "(TypedVariable"
	                                    "(GlobNode \"$X\")"
	                                    "(TypeNode \"PredicateNode\"))"
									 "(TypedVariable"
	                                    "(GlobNode \"$Y\")"
	                                    "(TypeNode \"ConceptNode\")))");

	Unify unify(ABR, XY, left_vardecl, right_vardecl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_typed_glob3_alt()
{
	Handle left_vardecl = Handle();
	Handle right_vardecl = _eval.eval_h("(VariableList"
									 "(TypedVariable"
	                                   "(GlobNode \"$X\")"
	                                   "(TypeNode \"ConceptNode\"))"
									"(TypedVariable"
	                                   "(GlobNode \"$Y\")"
	                                   "(TypeNode \"PredicateNode\")))");

	Unify unify(ABR, XY, left_vardecl, right_vardecl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {A, B})}, al(LIST_LINK, {A, B})},
							   {{Y, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_typed_glob4()
{
	Handle left_vardecl = Handle();
	Handle right_vardecl = _eval.eval_h("(VariableList"
	                                    "  (TypedVariable"
	                                    "    (GlobNode \"$X\")"
	                                    "    (TypeNode \"PredicateNode\"))"
	                                    "  (TypedVariable"
	                                    "    (GlobNode \"$Y\")"
	                                    "    (TypeNode \"PredicateNode\")))");

	Unify unify(UPQ, XY, left_vardecl, right_vardecl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{U, al(LIST_LINK, {X})}, al(LIST_LINK, {X})},
			                             {{Y, al(LIST_LINK, {P, Q})}, al(LIST_LINK, {P, Q})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_typed_glob4_alt1()
{
	Handle left_vardecl = _eval.eval_h("(VariableList"
	                                    "  (TypedVariable"
	                                    "    (GlobNode \"$X\")"
	                                    "    (TypeNode \"PredicateNode\"))"
	                                    "  (TypedVariable"
	                                    "    (GlobNode \"$Y\")"
	                                    "    (TypeNode \"PredicateNode\")))");
	Handle right_vardecl = Handle();

	Unify unify(XY, UPQ, left_vardecl, right_vardecl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{U, al(LIST_LINK, {X})}, al(LIST_LINK, {X})},
			                             {{Y, al(LIST_LINK, {P, Q})}, al(LIST_LINK, {P, Q})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_join()
{
	Unify unify(P, Q);
	Unify::Block b1({X, al(LIST_LINK, {P})});
	Unify::Block b2({X, al(LIST_LINK, {Q})});
	Unify::SolutionSet s1({{{b1, al(LIST_LINK, {P})}}});
	Unify::SolutionSet s2({{{b2, al(LIST_LINK, {Q})}}});

	auto result = unify.join(s1, s2);

	Unify::Block bj({X, al(LIST_LINK, {P, Q})});
	Unify::SolutionSet expected({{{bj, al(LIST_LINK, {P, Q})}}});

	std::cout << "result = " << oc_to_string(result) << std::endl;
	std::cout << "expected = " << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_join2()
{
	Unify unify(X, Y);
	Unify::Block b1({X, al(LIST_LINK, {U})});
	Unify::Block b2({V, al(LIST_LINK, {U})});
	Unify::Block b3({Y, al(LIST_LINK, {U})});
	Unify::SolutionSet s1({{{b1, al(LIST_LINK, {U})}}});
	Unify::SolutionSet s2({{{b2, al(LIST_LINK, {U})}}});
	Unify::SolutionSet s3({{{b3, al(LIST_LINK, {U})}}});

	auto r = unify.join(s1, s2);
	auto result = unify.join(r, s3);

	Unify::Block bj({U, al(LIST_LINK, {X, V, Y})});
	Unify::SolutionSet expected({{{bj, al(LIST_LINK, {X, V, Y})}}});

	std::cout << "\n result = " << oc_to_string(result) << std::endl;
	std::cout << "\n expected = " << oc_to_string(expected) << std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_unordered_glob3()
{
	Unify unify(UNQRP, UNXY);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
							   {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}},
	                             {{{X, al(LIST_LINK, {Q, P})}, al(LIST_LINK, {Q, P})},
							   {{Y, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}},
	                             {{{Y, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{X, al(LIST_LINK, {P, R})}, al(LIST_LINK, {P, R})}},
	                             {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{Y, al(LIST_LINK, {P, R})}, al(LIST_LINK, {P, R})}},
	                             {{{Y, al(LIST_LINK, {Q, P})}, al(LIST_LINK, {Q, P})},
							   {{X, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}},
	                             {{{Y, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
							   {{X, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_unordered_glob3_alt()
{
	Unify unify(UNC1C2, UNXY);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{Y, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})}},
							  {{{X, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})},
							  {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_unordered_glob4()
{
	Unify unify(UNXY, UNQRP);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
			                             {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}},
	                             {{{X, al(LIST_LINK, {Q, P})}, al(LIST_LINK, {Q, P})},
			                             {{Y, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}},
	                             {{{Y, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
			                             {{X, al(LIST_LINK, {P, R})}, al(LIST_LINK, {P, R})}},
	                             {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
			                             {{Y, al(LIST_LINK, {P, R})}, al(LIST_LINK, {P, R})}},
	                             {{{Y, al(LIST_LINK, {Q, P})}, al(LIST_LINK, {Q, P})},
			                             {{X, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}},
	                             {{{Y, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
			                             {{X, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_unordered_glob5()
{
	Unify unify(UNXY, UNQRPS);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, P, R})}, al(LIST_LINK, {Q, P, R})},
							   {{Y, al(LIST_LINK, {S})}, al(LIST_LINK, {S})}},
	                             {{{X, al(LIST_LINK, {Q, R, S})}, al(LIST_LINK, {Q, R, S})},
							   {{Y, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}},
	                             {{{X, al(LIST_LINK, {Q, P, S})}, al(LIST_LINK, {Q, P, S})},
							   {{Y, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}},
	                             {{{Y, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{X, al(LIST_LINK, {P, R, S})}, al(LIST_LINK, {P, R, S})}},
	                             {{{Y, al(LIST_LINK, {Q, R, S})}, al(LIST_LINK, {Q, R, S})},
							   {{X, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}},
	                             {{{Y, al(LIST_LINK, {Q, P, R})}, al(LIST_LINK, {Q, P, R})},
							   {{X, al(LIST_LINK, {S})}, al(LIST_LINK, {S})}},
	                             {{{Y, al(LIST_LINK, {Q, P, S})}, al(LIST_LINK, {Q, P, S})},
							   {{X, al(LIST_LINK, {R})}, al(LIST_LINK, {R})}},
	                             {{{X, al(LIST_LINK, {Q})}, al(LIST_LINK, {Q})},
							   {{Y, al(LIST_LINK, {P, R, S})}, al(LIST_LINK, {P, R, S})}},
	                             {{{X, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
							   {{Y, al(LIST_LINK, {P, S})}, al(LIST_LINK, {P, S})}},
	                             {{{X, al(LIST_LINK, {Q, P})}, al(LIST_LINK, {Q, P})},
							   {{Y, al(LIST_LINK, {R, S})}, al(LIST_LINK, {R, S})}},
	                             {{{Y, al(LIST_LINK, {Q, S})}, al(LIST_LINK, {Q, S})},
							   {{X, al(LIST_LINK, {P, R})}, al(LIST_LINK, {P, R})}},
	                             {{{X, al(LIST_LINK, {Q, S})}, al(LIST_LINK, {Q, S})},
							   {{Y, al(LIST_LINK, {P, R})}, al(LIST_LINK, {P, R})}},
	                             {{{Y, al(LIST_LINK, {Q, P})}, al(LIST_LINK, {Q, P})},
							   {{X, al(LIST_LINK, {R, S})}, al(LIST_LINK, {R, S})}},
	                             {{{Y, al(LIST_LINK, {Q, R})}, al(LIST_LINK, {Q, R})},
							   {{X, al(LIST_LINK, {P, S})}, al(LIST_LINK, {P, S})}}});
	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_unordered_glob6()
{
	Unify unify(UNXYPQ, UNSC1U);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{U, al(LIST_LINK, {Q, P})}, al(LIST_LINK, {Q, P})},
							   {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{X, al(LIST_LINK, {S})}, al(LIST_LINK, {S})}},
	                             {{{Y, al(LIST_LINK, {S})}, al(LIST_LINK, {S})},
							   {{X, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{U, al(LIST_LINK, {Q, P})}, al(LIST_LINK, {Q, P})}}});

	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_simple_unordered_glob7()
{
	Unify unify(UNXYUVW, UNSTOC1C2);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	// TODO check again
	Arity expected_size = 120;

	TS_ASSERT_EQUALS(result.size(), expected_size);
}

void UnifyGlobUTest::test_simple_unordered_glob8()
{
	Unify unify(UNUVAND, UNSORAND);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{U, al(LIST_LINK, {O, S})}, al(LIST_LINK, {O, S})},
							   {{V, al(LIST_LINK, {R})}, al(LIST_LINK, {R})},
							   {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{X, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})}},
	                             {{{U, al(LIST_LINK, {O, S})}, al(LIST_LINK, {O, S})},
							   {{V, al(LIST_LINK, {R})}, al(LIST_LINK, {R})},
							   {{Y, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})},
							   {{X, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})}},
	                             {{{U, al(LIST_LINK, {R, S})}, al(LIST_LINK, {R, S})},
							   {{V, al(LIST_LINK, {O})}, al(LIST_LINK, {O})},
							   {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{X, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})}},
	                             {{{U, al(LIST_LINK, {R, S})}, al(LIST_LINK, {R, S})},
							   {{V, al(LIST_LINK, {O})}, al(LIST_LINK, {O})},
							   {{Y, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})},
							   {{X, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})}},
	                             {{{V, al(LIST_LINK, {S})}, al(LIST_LINK, {S})},
							   {{U, al(LIST_LINK, {O, R})}, al(LIST_LINK, {O, R})},
							   {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{X, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})}},
	                             {{{V, al(LIST_LINK, {S})}, al(LIST_LINK, {S})},
							   {{U, al(LIST_LINK, {O, R})}, al(LIST_LINK, {O, R})},
							   {{Y, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})},
							   {{X, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})}},
	                             {{{V, al(LIST_LINK, {O, S})}, al(LIST_LINK, {O, S})},
							   {{U, al(LIST_LINK, {R})}, al(LIST_LINK, {R})},
							   {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{X, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})}},
	                             {{{V, al(LIST_LINK, {O, S})}, al(LIST_LINK, {O, S})},
							   {{U, al(LIST_LINK, {R})}, al(LIST_LINK, {R})},
							   {{Y, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})},
							   {{X, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})}},
	                             {{{V, al(LIST_LINK, {R, S})}, al(LIST_LINK, {R, S})},
							   {{U, al(LIST_LINK, {O})}, al(LIST_LINK, {O})},
							   {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{X, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})}},
	                             {{{V, al(LIST_LINK, {R, S})}, al(LIST_LINK, {R, S})},
							   {{U, al(LIST_LINK, {O})}, al(LIST_LINK, {O})},
							   {{Y, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})},
							   {{X, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})}},
	                             {{{U, al(LIST_LINK, {S})}, al(LIST_LINK, {S})},
							   {{V, al(LIST_LINK, {O, R})}, al(LIST_LINK, {O, R})},
							   {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{X, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})}},
	                             {{{U, al(LIST_LINK, {S})}, al(LIST_LINK, {S})},
							   {{V, al(LIST_LINK, {O, R})}, al(LIST_LINK, {O, R})},
							   {{Y, al(LIST_LINK, {C2})}, al(LIST_LINK, {C2})},
							   {{X, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})}}});

	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

void UnifyGlobUTest::test_typed_unordered_glob1()
{
	Handle left_vardecl = _eval.eval_h("(VariableList"
									"(TypedVariable"
	                                   "(GlobNode \"$X\")"
	                                   "(TypeNode \"PredicateNode\"))"
	                                "(TypedVariable"
	                                   "(GlobNode \"$Y\")"
	                                   "(TypeNode \"ConceptNode\")))");
	Unify unify(UNXYP, UNQSC1U, left_vardecl);
	Unify::SolutionSet result = unify();
	std::cout<< "\n result\n" << oc_to_string(result) <<std::endl;

	Unify::SolutionSet expected({{{{X, al(LIST_LINK, {Q, S})}, al(LIST_LINK, {Q, S})},
							   {{Y, al(LIST_LINK, {C1})}, al(LIST_LINK, {C1})},
							   {{U, al(LIST_LINK, {P})}, al(LIST_LINK, {P})}}});

	std::cout<< "\n expected\n" << oc_to_string(expected) <<std::endl;

	TS_ASSERT_EQUALS(result, expected);
}

#undef al
#undef an
